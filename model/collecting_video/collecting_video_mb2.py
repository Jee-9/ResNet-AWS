# -*- coding: utf-8 -*-
"""YouTubeAPI_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17bfeTmSliS2OlQpN7xVlcur_OLWuPdDb
"""

# !pip install pytube

# from google.colab import drive
# drive.mount('/content/drive')

from pytube import YouTube


"""### 동영상 id 가져오는 코드"""

import pandas as pd
import numpy as np

import requests

from apiclient.discovery import build
from apiclient.errors import HttpError
from oauth2client.tools import argparser

import json
import urllib

DEVELOPER_KEY = "AIzaSyCuB_gYfkvSA2WKiXjegilvkIfNG5IPpQY"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"

class Search_ChannelID:
  def __init__(self, username):
    self.username = username

  def channel_id(self):
    youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=DEVELOPER_KEY)

    # Call the search.list method to retrieve results matching the specified query term.
    search_response = youtube.channels().list(part="id",
                                            forUsername = str(self.username),
                                            maxResults=1
                                            ).execute()

    channelID = {}

    search_result = search_response.get("items", [])[0]
    if search_result["kind"] == "youtube#channel":
      channelID[self.username] = search_result["id"]
    else:
      return "No exists channel"

    return channelID

class Channel():
  def __init__(self, channelID):
    self.channelID = channelID

  def youtube_search(self):
    youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=DEVELOPER_KEY)

    # Call the search.list method to retrieve results matching the specified query term.
    search_response = youtube.search().list(part="id, snippet",
                                            channelId = str(self.channelID),
                                            maxResults=26
                                            ).execute()

    videos = {}
    channels = {}
    playlists = {}

    # Add each result to the appropriate list, and then display the lists of matching videos, channels, and playlists.
    for search_result in search_response.get("items", []):
      if search_result["id"]["kind"] == "youtube#video":
        videos[search_result["snippet"]["title"]] = search_result["id"]["videoId"]
      elif search_result["id"]["kind"] == "youtube#channel":
        channels[search_result["snippet"]["title"]] = search_result["id"]["channelId"]
      elif search_result["id"]["kind"] == "youtube#playlist":
        playlists[search_result["snippet"]["title"]] = search_result["id"]["playlistId"]

    return videos, channels, playlists


# Hongyu ASMR 홍유

channelID = "UCxtLc0Jqq3SKBWlIXM_OC9g"

mukbang2 = Channel(channelID)
video2, channels2, playlists2 = mukbang2.youtube_search()


video2_id_list = list(video2.values())

# video2 _ 홍유 먹방

for i in range(len(video2_id_list)):
  ytb_url = "https://www.youtube.com/watch?v="
  video_id2 = video2_id_list[i]
  vid_url = ytb_url + video_id2

  yt = YouTube(vid_url)
  streams = yt.streams.filter(only_video = True)

  for s in streams:
    s.download('/content/Youtube_API/Mukbang')

